@page "/downloads"
@using Blazorserver.Services
@rendermode InteractiveServer
@inject IFileDownload fileDownload
@inject IJSRuntime JS

<h3>Downloads (@previewImages.Count files found)</h3>

@if (previewImages.Count > 0)
{
    <div class="card">
        <div class="row align-items-start">
            @foreach (var item in previewImages)
            {
                var type = item.Split(";");
                <div class="col-2 mb-3">
                    @if (type[0].Contains("image"))
                    {
                        <img class="rounded float-left" src="@item" width="100" height="100"/>
                    }
                    else if (type[0].Contains("pdf"))
                    {
                        <img class="rounded float-left" src="/uploads/images/pdf_logo.png" width="100" height="100"/>
                    }
                    <button class="btn btn-primary mt-2" @onclick="() => DownloadFile(item)">
                        Download
                    </button>
                </div>
            }
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(downloadStatus))
{
    <div class="alert alert-info mt-3">@downloadStatus</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private IList<string> previewImages = new List<string>();
    private string downloadStatus = "";
    private string errorMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                previewImages = await fileDownload.GetUploadedFiles();
                downloadStatus = $"Found {previewImages.Count} files";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error loading files: {ex.Message}";
            }
        }
    }

    private async Task DownloadFile(string url)
    {
        try
        {
            await fileDownload.DownloadFile(url);
        }
        catch (Exception ex)
        {
            errorMessage = $"Download failed: {ex.Message}";
        }
    }
}